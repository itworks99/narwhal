{"version":3,"sources":["ui_support.jsx","narwhal_web.jsx","serviceWorker.js","index.js"],"names":["chartColors","syslogSeverity","key","text","value","syslogFacility","version","serverDataEntry","serverEventsEntry","https","require","Narwhal","useState","eventsReady","setEventsReady","logDataJSON","setLogDataJSON","events","setEvents","loading","setLoading","timerCounter","setTimerCounter","activeMenuItem","setActiveMenuItem","useEffect","requestInstance","axios","create","httpsAgent","Agent","keepAlive","rejectUnauthorized","headers","tick","url","counter","get","then","response","JSON","parse","request","responseText","catch","error","console","log","fetchEvents","timerID","setInterval","clearInterval","clickOnSideSectionMenuItem","e","projectTitle","Header","inverted","Image","src","verticalAlign","size","Content","Subheader","renderSelectedMenuSection","Grid","stretched","padded","relaxed","Column","mobile","tablet","computer","id","Row","columns","Statistic","Group","Value","total_events","Label","color","logAlertCount","logWarningsCount","logMessageCount","messages_per_second","seconds_between_messages","redis_used_memory_human","redis_total_system_memory_human","height","width","margin","top","right","bottom","left","type","dataKey","name","unit","cursor","strokeDasharray","data","ChartData0","fill","ChartData1","ChartData2","ChartData3","ChartData4","ChartData5","ChartData6","ChartData7","logTableRow","i","dt","length","recordDotColor","severity","Table","Cell","circular","n","facility","timestamp","ip","endpoint","system","event","Segment","basic","compact","striped","selectable","HeaderCell","Body","eventsTable","stackable","textAlign","icon","Icon","Button","href","Divider","hidden","sideMenu","Menu","Item","header","onClick","Sidebar","Pushable","as","animation","vertical","visible","Pusher","Dimmer","active","Loader","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cc2f5fb8.chunk.js","sourcesContent":["export const chartColors = [\n  '#8E3642',\n  '#A42150',\n  '#BC3148',\n  '#DA1E45',\n  '#F5D03E',\n  '#7AA543',\n  '#6C99D7',\n  '#CCD3D9',\n];\n\n// RFC 5424\n\nexport const syslogSeverity = [\n  { key: 0, text: 'Emergency', value: 0 },\n  { key: 1, text: 'Alert', value: 1 },\n  { key: 2, text: 'Critical', value: 2 },\n  { key: 3, text: 'Error', value: 3 },\n  { key: 4, text: 'Warning', value: 4 },\n  { key: 5, text: 'Notice', value: 5 },\n  { key: 6, text: 'Informational', value: 6 },\n  { key: 7, text: 'Debug', value: 7 },\n];\n\nexport const syslogFacility = [\n  { key: 0, text: 'kern', value: 0 },\n  { key: 1, text: 'user', value: 1 },\n  { key: 2, text: 'mail', value: 2 },\n  { key: 3, text: 'daemon', value: 3 },\n  { key: 4, text: 'auth', value: 4 },\n  { key: 5, text: 'syslog', value: 5 },\n  { key: 6, text: 'lpr', value: 6 },\n  { key: 7, text: 'news', value: 7 },\n  { key: 8, text: 'uucp', value: 8 },\n  { key: 9, text: 'cron', value: 9 },\n  { key: 10, text: 'authpriv', value: 10 },\n  { key: 11, text: 'ftp', value: 11 },\n  { key: 12, text: 'ntp', value: 12 },\n  { key: 13, text: 'security', value: 13 },\n  { key: 14, text: 'console', value: 14 },\n  { key: 15, text: 'solaris-cron', value: 15 },\n  { key: 16, text: 'local0', value: 16 },\n  { key: 17, text: 'local1', value: 17 },\n  { key: 18, text: 'local2', value: 18 },\n  { key: 19, text: 'local3', value: 19 },\n  { key: 20, text: 'local4', value: 20 },\n  { key: 21, text: 'local5', value: 21 },\n  { key: 22, text: 'local6', value: 22 },\n  { key: 23, text: 'local7', value: 23 },\n];\n\nexport const refreshOptions = [\n  { key: 3, text: '3 seconds', value: 3 },\n  { key: 5, text: '5 seconds', value: 5 },\n  { key: 10, text: '10 seconds', value: 10 },\n  { key: 20, text: '20 seconds', value: 20 },\n  { key: 40, text: '40 seconds', value: 40 },\n  { key: 60, text: '60 seconds', value: 60 },\n];\n","import {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  ZAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Dimmer,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Label,\n  Loader,\n  Menu,\n  Segment,\n  Sidebar,\n  Statistic,\n  Table,\n} from 'semantic-ui-react';\nimport { chartColors, syslogFacility, syslogSeverity } from './ui_support';\n\nconst version = 'ver.0.2';\nconst serverDataEntry = 'https://localhost:8000/server_data';\nconst serverEventsEntry = 'https://localhost:8000/server_events';\n// const serverDataEntry = '/server_data';\n// const serverEventsEntry = '/server_events';\n\nconst https = require('https');\n\nfunction Narwhal() {\n  const [eventsReady, setEventsReady] = useState(false);\n  const [logDataJSON, setLogDataJSON] = useState();\n  const [events, setEvents] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [timerCounter, setTimerCounter] = useState(0);\n\n  const [activeMenuItem, setActiveMenuItem] = useState('dashboard');\n\n  useEffect(() => {\n    const requestInstance = axios.create({\n      httpsAgent: new https.Agent({\n        keepAlive: true,\n        rejectUnauthorized: false,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'PUT, GET, POST, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Origin, Accept, Content-Type, X-Requested-With',\n        },\n      }),\n    });\n\n    function fetchData(url) {\n      requestInstance\n        .get(url)\n        .then((response) => {\n          setLogDataJSON(JSON.parse(response.request.responseText));\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n\n    function fetchEvents(url) {\n      requestInstance\n        .get(url)\n        .then((response) => {\n          setEvents(JSON.parse(response.request.responseText));\n          setEventsReady(true);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n\n    function tick() {\n      let counter = timerCounter + 1;\n      if (counter === 1) {\n        setLoading(true);\n        fetchData(serverDataEntry);\n        fetchEvents(serverEventsEntry);\n        if (logDataJSON) {\n          setLoading(false);\n        }\n      }\n      if (counter === 30) {\n        counter = 0;\n      }\n      setTimerCounter(counter);\n    }\n\n    const timerID = setInterval(() => tick(), 1000);\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  });\n\n  const clickOnSideSectionMenuItem = (e, { value }) => {\n    setActiveMenuItem(value);\n  };\n\n  const noticeColor = 'green';\n  const warningColor = 'yellow';\n  const alertColor = 'red';\n\n  const projectTitle = (\n    <Header inverted>\n      <Image src=\"/static/img/nlogo.png\" verticalAlign=\"middle\" size=\"medium\" />\n      <Header.Content>\n        Narwhal\n        <Header.Subheader>{version}</Header.Subheader>\n      </Header.Content>\n    </Header>\n  );\n\n  function eventsTable() {\n    let logTableRow = [];\n    if (eventsReady === true) {\n      for (let i = 0; i < events.dt.length; i += 1) {\n        let recordDotColor = 'yellow';\n        if (events.severity[i] < 4) {\n          recordDotColor = 'red';\n        }\n        if (events.severity[i] === 5) {\n          recordDotColor = 'green';\n        }\n        if (events.severity[i] === 6) {\n          recordDotColor = 'blue';\n        }\n        if (events.severity[i] === 7) {\n          recordDotColor = 'grey';\n        }\n        logTableRow[i] = (\n          <Table.Row key={`eventTableRow${i}`}>\n            <Table.Cell>\n              <Label circular color={recordDotColor}>\n                <b>{events.n[i]}</b>\n              </Label>\n            </Table.Cell>\n            <Table.Cell>\n              <Header size=\"tiny\">\n                <Header.Content>\n                  {syslogSeverity[events.severity[i]].text}\n                  <Header.Subheader>{syslogFacility[events.facility[i]].text}</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n            <Table.Cell>\n              <Header size=\"tiny\">\n                <Header.Content>\n                  {events.timestamp[i]}\n                  <Header.Subheader>{events.dt[i]}</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n            <Table.Cell>\n              <Header size=\"tiny\">\n                <Header.Content>\n                  {events.ip[i]}\n                  <Header.Subheader>{events.endpoint[i]}</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n            <Table.Cell>\n              <Header size=\"tiny\">\n                <Header.Content>\n                  {events.system[i]}\n                  <Header.Subheader>{events.event[i]}</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n          </Table.Row>\n        );\n      }\n    } else {\n      logTableRow = null;\n    }\n    return (\n      <Segment basic padded={false}>\n        <Table compact=\"very\" striped selectable size=\"small\">\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell> N </Table.HeaderCell>\n              <Table.HeaderCell> Sev/Facility </Table.HeaderCell>\n              <Table.HeaderCell> Timestamp/Received at </Table.HeaderCell>\n              <Table.HeaderCell> Source/Endpoint </Table.HeaderCell>\n              <Table.HeaderCell> System / Message </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>{logTableRow}</Table.Body>\n        </Table>\n      </Segment>\n    );\n  }\n\n  if (!loading) {\n    let renderSelectedMenuSection = '';\n\n    if (activeMenuItem === 'dashboard') {\n      renderSelectedMenuSection = (\n        <Grid stretched padded relaxed=\"very\">\n          <Grid.Column mobile={16} tablet={13} computer={14} id=\"content\">\n            <Grid.Row>\n              <Grid padded relaxed columns=\"equal\">\n                <Grid.Column>\n                  <Statistic.Group size=\"small\">\n                    <Statistic>\n                      <Statistic.Value>{logDataJSON.total_events}</Statistic.Value>\n                      <Statistic.Label> log entries </Statistic.Label>\n                    </Statistic>\n                    <Statistic color={alertColor}>\n                      <Statistic.Value>{logDataJSON.logAlertCount}</Statistic.Value>\n                      <Statistic.Label> alerts </Statistic.Label>\n                    </Statistic>\n                    <Statistic color={warningColor}>\n                      <Statistic.Value>{logDataJSON.logWarningsCount}</Statistic.Value>\n                      <Statistic.Label> warnings </Statistic.Label>\n                    </Statistic>\n                    <Statistic color={noticeColor}>\n                      <Statistic.Value>{logDataJSON.logMessageCount}</Statistic.Value>\n                      <Statistic.Label> messages </Statistic.Label>\n                    </Statistic>\n                  </Statistic.Group>\n                </Grid.Column>\n                <Grid.Column>\n                  <Statistic.Group size=\"small\">\n                    <Statistic>\n                      <Statistic.Value>{logDataJSON.messages_per_second}</Statistic.Value>\n                      <Statistic.Label> msg / sec </Statistic.Label>\n                    </Statistic>\n                    <Statistic>\n                      <Statistic.Value>{logDataJSON.seconds_between_messages}</Statistic.Value>\n                      <Statistic.Label> avg.interval, sec. </Statistic.Label>\n                    </Statistic>\n                  </Statistic.Group>\n                </Grid.Column>\n                <Grid.Column>\n                  <Statistic.Group size=\"small\">\n                    <Statistic>\n                      <Statistic.Value>{logDataJSON.redis_used_memory_human}</Statistic.Value>\n                      <Statistic.Label> used redis memory </Statistic.Label>\n                    </Statistic>\n                    <Statistic>\n                      <Statistic.Value>\n                        {logDataJSON.redis_total_system_memory_human}\n                      </Statistic.Value>\n                      <Statistic.Label> total redis memory </Statistic.Label>\n                    </Statistic>\n                  </Statistic.Group>\n                </Grid.Column>\n              </Grid>\n            </Grid.Row>\n            <Grid.Row>\n              <ScatterChart\n                height={250}\n                width={1200}\n                margin={{\n                  top: 20,\n                  right: 10,\n                  bottom: 10,\n                  left: 10,\n                }}\n              >\n                <CartesianGrid />\n                <XAxis type=\"category\" dataKey=\"x\" name=\"timeline\" />\n                <YAxis type=\"number\" dataKey=\"y\" name=\"severity\" />\n                <ZAxis type=\"number\" dataKey=\"z\" name=\"amount\" unit=\"log records\" />\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                <Legend />\n                <Scatter\n                  name={syslogSeverity[0].text}\n                  data={logDataJSON.ChartData0}\n                  fill={chartColors[0]}\n                />\n                <Scatter\n                  name={syslogSeverity[1].text}\n                  data={logDataJSON.ChartData1}\n                  fill={chartColors[1]}\n                />\n                <Scatter\n                  name={syslogSeverity[2].text}\n                  data={logDataJSON.ChartData2}\n                  fill={chartColors[2]}\n                />\n                <Scatter\n                  name={syslogSeverity[3].text}\n                  data={logDataJSON.ChartData3}\n                  fill={chartColors[3]}\n                />\n                <Scatter\n                  name={syslogSeverity[4].text}\n                  data={logDataJSON.ChartData4}\n                  fill={chartColors[4]}\n                />\n                <Scatter\n                  name={syslogSeverity[5].text}\n                  data={logDataJSON.ChartData5}\n                  fill={chartColors[5]}\n                />\n                <Scatter\n                  name={syslogSeverity[6].text}\n                  data={logDataJSON.ChartData6}\n                  fill={chartColors[6]}\n                />\n                <Scatter\n                  name={syslogSeverity[7].text}\n                  data={logDataJSON.ChartData7}\n                  fill={chartColors[7]}\n                />\n              </ScatterChart>\n            </Grid.Row>\n            <Grid.Row>{eventsTable()}</Grid.Row>\n          </Grid.Column>\n        </Grid>\n      );\n    }\n    if (activeMenuItem === 'data') {\n      renderSelectedMenuSection = (\n        <Grid columns={4} stackable textAlign=\"center\" stretched padded relaxed=\"very\">\n          <Grid.Row>\n            <Header padded>Export events data as</Header>\n          </Grid.Row>\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column />\n            <Grid.Column>\n              <Header icon>\n                <Icon name=\"file excel outline\" />\n                CSV\n              </Header>\n              <Button>\n                <a href=\"/csv_alerts\">Alerts only</a>\n              </Button>\n              <Divider hidden />\n              <Button>\n                <a href=\"/csv_all\">All events</a>\n              </Button>\n            </Grid.Column>\n            <Grid.Column>\n              <Header icon>\n                <Icon name=\"file code outline\" />\n                JSON\n              </Header>\n              <Button>\n                <a href=\"/json_alerts\">Alerts only</a>\n              </Button>\n              <Divider hidden />\n              <Button>\n                <a href=\"/json_all\">All events</a>\n              </Button>\n            </Grid.Column>\n            <Grid.Column />\n          </Grid.Row>\n        </Grid>\n      );\n    }\n    const sideMenu = (\n      <>\n        <Menu.Item header>{projectTitle}</Menu.Item>\n        <Menu.Item header value=\"dashboard\" onClick={clickOnSideSectionMenuItem}>\n          <Icon name=\"heartbeat\" size=\"large\" />\n          Dashboard\n        </Menu.Item>\n        <Menu.Item header value=\"data\" onClick={clickOnSideSectionMenuItem}>\n          <Icon name=\"book\" size=\"large\" />\n          Data export\n        </Menu.Item>\n      </>\n    );\n    return (\n      <Sidebar.Pushable as={Segment}>\n        <Sidebar as={Menu} animation=\"slide along\" inverted vertical visible width=\"thin\">\n          {sideMenu}\n        </Sidebar>\n        <Sidebar.Pusher>\n          <Segment basic>{renderSelectedMenuSection}</Segment>\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    );\n  }\n  return (\n    <>\n      <Dimmer inverted active={loading}>\n        <Loader size=\"massive\"> Loading </Loader>\n      </Dimmer>\n    </>\n  );\n}\n\nexport default Narwhal;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport Narwhal from './narwhal_web.jsx';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.hydrate(<Narwhal />, document.getElementById('root'));\nReactDOM.render(<Narwhal />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}